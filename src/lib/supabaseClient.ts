import { createClient } from '@supabase/supabase-js';

// Ensure environment variables are set
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl) {
  throw new Error("Missing environment variable: NEXT_PUBLIC_SUPABASE_URL");
}
if (!supabaseAnonKey) {
  throw new Error("Missing environment variable: NEXT_PUBLIC_SUPABASE_ANON_KEY");
}

// Create and export the Supabase client
// We can use this client instance in both client-side and server-side code (API routes)
export const supabase = createClient(supabaseUrl, supabaseAnonKey);

// Define types based on your Supabase schema (optional but recommended for type safety)
export interface Student {
  id: number;
  first_name: string;
  last_name: string;
  email: string;
  instagram?: string | null; // Optional field
  regular?: boolean | null;
  created_at?: string;
}

export interface Event { // This is for spectator events
  id: number;
  name: string;
  details?: string | null;
  date?: string | null; // Assuming date type maps to string initially
  time?: string | null; // Assuming time type maps to string initially
  price: number; // Assuming numeric maps to number
  max_capacity?: number | null; // Optional field
  created_at?: string;
}

// New interface for Courses table (student offerings: jams, workshops, courses)
export interface Course {
  id: number;
  name: string;
  start_date?: string | null; // Assuming date type maps to string
  end_date?: string | null;   // Assuming date type maps to string
  price: number; // Assuming numeric maps to number
  type: string; // e.g., 'jam', 'workshop', 'course'
  max_capacity?: number | null; // Optional field
  created_at?: string; // Assuming you'll add this for tracking
}

export interface EventParticipant {
  id?: number; // Usually generated by DB
  student_id: number;
  event_id: number;
  payment_status: 'pending' | 'paid' | 'failed'; // Example statuses
  registered_at?: string;
}

// New interface for Course Participants table
export interface CourseParticipant {
  id?: number; // Usually generated by DB
  student_id: number;
  course_id: number;
  payment_status: 'pending' | 'paid' | 'failed'; // Example statuses
  registered_at?: string; // Assuming you'll add this for tracking
}
