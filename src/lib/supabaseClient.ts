import { createClient } from '@supabase/supabase-js';

// Ensure environment variables are set
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl) {
  throw new Error("Missing environment variable: NEXT_PUBLIC_SUPABASE_URL");
}
if (!supabaseAnonKey) {
  throw new Error("Missing environment variable: NEXT_PUBLIC_SUPABASE_ANON_KEY");
}

// Create and export the Supabase client
// We can use this client instance in both client-side and server-side code (API routes)
export const supabase = createClient(supabaseUrl, supabaseAnonKey);

// Define types based on your Supabase schema (optional but recommended for type safety)
export interface Customer {
  id: number;
  first_name: string;
  last_name: string;
  email: string;
  phone?: string; 
  regular?: boolean | null;
  created_at?: string;
}

export interface Event { // This is for spectator events
  id: number;
  name: string;
  details?: string | null;
  date: string; 
  time: string; 
  price: number; // Assuming numeric maps to number
  max_capacity?: number | null; 
  type: 'show' | 'workshop' | 'jam' | 'other';
}

export interface EventWithCount extends Event {
  participant_count: number;
  isSoldOut?: boolean;
}

export interface Course {
  id: number;
  start_date: string;
  end_date: string;
  max_capacity: number;
  level?: number;
  instructor: string;
  location: string;
  day_of_week: number;
  time: string;
}

// export interface RegistrableItem {
//   id: number;
//   name: string;
//   price: number;
//   max_capacity?: number;
//   participant_count: number;
//   itemType: 'event' | 'course';
//   details: string;
//   date: string | null | undefined; 
// }

export interface EventParticipant {
  id?: number; // Usually generated by DB
  customer_id: number;
  event_id: number;
  payment_status: 'pending' | 'paid' | 'failed'; // Example statuses
  registered_at?: string;
}

// New interface for Course Participants table
export interface CourseParticipant {
  id?: number; // Usually generated by DB
  customer_id: number;
  course_id: number;
  payment_status: 'pending' | 'paid' | 'failed'; // Example statuses
  registered_at?: string; // Assuming you'll add this for tracking
}
